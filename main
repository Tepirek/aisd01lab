#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

bool mono(int a, int b) {
	if ((b - a) > 0) return 1;
	else return 0;
}

void findFast(int* numbers, int min, int max, int elem, bool rising) {
  int mid;
  while(true) {
    mid = (min + max) / 2;
    // printf("min=%d, mid=%d, max=%d\n", min, mid, max);
    // sleep(1);
    if(numbers[mid] == elem) {
      printf("%d\n", mid);
      return;
    }
    if(min == max) {
      printf("%d\n", -1);
      return;
    }
    if(rising) {
      if(numbers[mid] > elem) {
        // printf("1");
        min = min;
        max = mid - 1;
        continue;
      }
      else {
        // printf("2");
        min = mid + 1;
        max = max;
        continue;
      }
    }
    else {
      if(numbers[mid] > elem) {
        // printf("3");
        min = mid + 1;
        max = max;
        continue;
      }
      else {
        // printf("4");
        min = min;
        max = mid - 1;
        continue;
      }
    }
  }
}

int main(void) {

  int test;
  scanf("%d ", &test);

  for(int i = 0; i < test; i++) {
    int amountOfNumbers;
    scanf("%d", &amountOfNumbers);
    int* numbers = (int*) malloc(amountOfNumbers * sizeof(int));
    
    for(int i = 0; i < amountOfNumbers; i++) scanf("%d", &numbers[i]);
    char c;
    while((c = getchar()) != '\n');

    int elemsToFind;
    scanf("%d", &elemsToFind);

    for(int i = 0; i < elemsToFind; i++) {
      int elemToFind;
      scanf("%d", &elemToFind);
      bool rising = mono(numbers[0], numbers[1]);
      // printf("%d\n", rising);
      findFast(numbers, 0, amountOfNumbers - 1, elemToFind, rising);
    }
  }

	return 0;
}
